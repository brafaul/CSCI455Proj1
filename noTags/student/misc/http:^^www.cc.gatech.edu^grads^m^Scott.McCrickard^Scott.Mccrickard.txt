Date: Thu, 21 Nov 1996 22:13:07 GMT
Server: Apache/1.1.1
Content-type: text/html
Content-length: 7999
Last-modified: Wed, 02 Oct 1996 01:02:07 GMT



Scott McCrickard's Home Page
D. Scott McCrickard
 





Background
Scott McCrickard is a PhD student in the
 College of Computing 
at the  Georgia Institute of Technology.
He is a member of the
Software
Visualization Group in the
Graphics, Visualization,
and Usability Center at Tech.
His advisor is

John Stasko.
The focus of Scott's research is on
Internet information monitoring and display.



Scott received his undergraduate degree from the
University of North Carolina at Chapel Hill
in 1992.  His major was mathematical sciences with an
emphasis in computer science.
For his honors project he helped design
and implement PGOMS,
an interface for creating GOMS models.


Scott has worked at
Oak Ridge National Laboratories (ORNL)
with Tom Rowan as a member
of the Visual and
Information Sciences Group.  While at ORNL, Scott built the first
version of Irwin,
an information resource monitoring and display tool,
as part of the
GO-NII
Collaborative Tools project.



If you are interested, please examine Scott's

resume.



Research
The focus of Scott's research is the area of information visualization.
He has also done work in parallel and distributed computing.
Below are listed some research areas of interest.  If you wish to
discuss any of these topics,
please get in touch with Scott.



Internet Information Monitoring and Display
 is an important area considering the constantly growing
and changing nature of the Internet.  Resources such as Email, Usenet
news, and the World Wide Web provide a continuous flow of information.
While users can access this information using any of a number of readers
and browsers, it is difficult to determine when and if a resource
needs to be accessed.  In addition, the large amounts of information
that accumulate can be difficult to assimilate at a glance.



Visualizations are needed that will provide an overview of these resources
with a detailed look at recent changes.  As a result, information about
the names and content of the messages and documents must be encoded in
a small number of pixels through the use of color, intensity, size,
and shape.  These techniques are reflected in
Irwin, a tool that
monitors resources and provides various alerts
when changes occur.  A multi-layer view of the resources
simultaneously provides a broad overview of all resources plus
a narrow look at recent changes without losing context.



Recently, Scott was also part of a team that developed
SQWID, a Java tool for visualizing
the results from an Alta Vista search.  SQWID provides
a stress-based graph view of the search result sites
that will hopefully help users identify
interesting Web sites.


Program Visualization examines methods for visualizing
information about a computer program.  For years programmers have drawn
pictures such as flowcharts or control-flow diagrams to help other
programmers and users better understand their programs.
Unfortunately, these pictures will not provide the
exact desired perspective for every user.
Clearly, methods are needed for automatically generating
graphical representations of programs.



Existing code formatters, profilers, and analysis systems provide
adequate static and post-mortem views of a program.  However,
debugging and understanding is aided if the program execution
is shown in conjunction with the program code.  By visually connecting
the code and execution, the user can identify elements in the program
that otherwise would not be visible.
Scott is working on RunView,
a runtime-based code analysis system
that incorporates these and other ideas.  He is also exploring how
RunView can be used to decompose software architectures in a project
with Gregory Abowd.


Software Visualization is the use of graphics,
visualization, and animation as an aid in the understanding of
algorithms, architectures, and software.  Software visualizations
can be constructed using toolkits like
Tango
and Polka.
With these toolkits, a programmer creates objects and programs them
with actions that occur over a number of frames.



With the advent of improved hardware, the number of frames displayed
per second is sure to decrease.  Thus, a natural evolution is to specify
actions not in frames but in real time (seconds and milliseconds).
This concept is central to Polka-RC (Polka Real-Clock), an evolution of
the original Polka system with the added capability of time-based
animation activations and durations.  In addition, Polka-RC
provides more natural ways to describe actions and their relationship
to objects.  Tech report

GIT-GVU-95-21 discusses these ideas in detail.


Wait-Free Consensus reflects the ability of N
distributed objects to ``agree'' in the presence of N-1 failures.
A number of object parameters can impact on this ability to agree.  See

GIT-CC-94-04 for a discussion of these parameters and a look at the
properties of some distributed objects.



Teaching

Scott has TAed a number of courses at both the graduate and
undergraduate levels, including 
CS 6751
(Human-Computer Interaction), CS 1155 (Understanding and Constructing Proofs),
CS 4753 (Human Factors in Software Development), and
CS 6152 (Theory of Automata).  His TA position has required that he
create and grade homeworks and projects, assist students, maintain
Web pages, and teach classes on occasion.



Personal

In his free time, Scott plays tennis for an ALTA team,
with its best finishes city runner-up at B5 and division champs
at A6.  He also (less regularly) plays other sports,
including softball, basketball, and fencing.
He even took up golf recently in an effort to better understand

his advisor.  (It didn't work, and Scott sank still further
into debt.)
For the past two summers while in the Oak Ridge area,
Scott got to ski, skurf, slalom, disk, and do other water activities
since he had a lake in his backyard.
He spends too much time on the Web, as evidenced by the size of
his 
hotlist.
Scott is tired of writing about himself in the third person.




Contact information

D. Scott McCrickard
College of Computing
801 Atlantic Drive
Georgia Institute of Technology
Atlanta, GA 30332-0280

email: mccricks@cc.gatech.edu

phone: (404) 894-9390


