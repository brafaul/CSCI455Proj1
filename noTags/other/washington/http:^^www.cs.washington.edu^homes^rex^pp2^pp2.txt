Date: Tue, 10 Dec 1996 20:41:13 GMT
Server: NCSA/1.4.2
Content-type: text/html
Last-modified: Tue, 14 Nov 1995 11:06:33 GMT
Content-length: 6953




Persistent Programming Languages:  The Best of Both
  Worlds







     
 Next: Contents
  
Persistent Programming Languages:  The Best of Both
  Worlds
 Rex Jakobovits
 Department of Computer Science
and Engineering, FR-35  University of Washington  Seattle,
Washington 98195
ROUGH DRAFT

Abstract:
The integration of databases and programming langauges is being
  motivated from two directions.  The database community requires a
  more flexible and powerful way of modeling the world, whereas the
  programming language community wants the convenience of a reliable,
  efficient means of enabling entities to persist between program
  invocations.  Traditionally, the query facilities provided to
  database users are not computationally complete, precluding
  arbitrarily complex processing of data.  Furthermore, they support
  only primitive data types, making them inappropriate for modeling
  certain real world applications.  Processing must be done off-line
  in a host language, but translation between the database and the
  language results in an impedence mismatch problem.  One solution is
  to extend an existing programming language with the notion of
  persistence, enabling it to seamlessly interact with the storage
  manager.  This paper is a survey of such efforts and the issues
  involved, focusing primarily on persistent object-oriented
  languages.

 

 Contents
  Integrating Databases and Programming Languages

  The Programming Language Perspective
  The Database Perspective

  Overcoming the Impedence Mismatch Problem

  Milestones in Persistent Programming Langauge Development

  Comparison to Relational Databases
  Case Study: Two Object-Oriented Databases

  Transparent Persistence
  Declarative Query Facility
  Collections and Iterators
  Constraints

  Active Databases: Triggers

  Once-Only Triggers
  Perpetual Triggers
  Intra-Object vs. Inter-Object Triggers
  Eager vs. Lazy Computation
  Triggers and Constraints in Other Systems

  Misc. Features of Object-Oriented Database Systems

  Mandatory Features
  Optional Features
  Swizzling
  Referential Integrity
  Versioning

  Other Object-Oriented Systems

  BETA
  PROCOL

  Constraint-Based Imperative Languages

  Constraints and Object Identity
  Kaleidoscope
  Adding Transactions to Kaleidoscope
  Techniques for Integration: Summary

  Persistent Prolog: Motivation and Issues

  Expert Systems
  Why Prolog Could Use Persistence
  Database Interface for Prolog
  Translation Between SQL and Prolog
  Meta-Translation
  MIMER: A Back End to Prolog

 References
    About this document ... 

 

Rex Jakobovits 
Tue Nov 14 02:57:45 PST 1995


