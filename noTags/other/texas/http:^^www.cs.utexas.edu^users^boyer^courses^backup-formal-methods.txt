MIME-Version: 1.0
Server: CERN/3.0
Date: Wednesday, 08-Jan-97 16:30:09 GMT
Content-Type: text/html
Content-Length: 25828
Last-Modified: Wednesday, 17-Jan-96 23:03:29 GMT



The World Wide Web Virtual Library:
Formal Methods









Virtual Library


Computing


Software Engineering



Formal Methods




Please mail 
J.P.Bowen@reading.ac.uk
if you know of relevant on-line information not included here
or would like to maintain information on a particular topic.
Use the comp.specification
newsgroup, or the newer

comp.specification.misc
newsgroup, for general formal methods queries.






This document contains some pointers to information
on 
Formal Methods
available around the world on the

World Wide Web (WWW), a global hypermedia system providing

worldwide information.


Links for accessing on-line
information in the following categories are available:



 Announcement
 Latest news
 
     Introductory articles
 Individual notations, methods and tools
 Publications
     (including journals, papers, books, etc.)
 
     Electronic repositories
 Meetings
 Projects
 Companies

Organizations
 
     Who's Who on the Web in
     
     Formal Methods
 Relevant newsgroups
 Related topics




indicates new entries.


indicates a (subjectively!) recommended link for especially good
on-line information. If enough people email me, I will add a star to
entries recommended by others.  


Latest news:
This space will be used to indicate selected new entries
and developments in the formal methods pages. 



The Steam Boiler Control Specification Problem
by J.-R. Abrial, E. Bï¿½rger and H. Langmaack.
A comparative case study for different formal techniques -
further submissions are invited.
(2 August 1995)



Comp.specification.* newsgroups.
(12 July 1995)



Petri Nets graphical notation.
(11 April 1995)



Tools demonstration information
for 
WIFT95 workshop.
(6 April 1995)


A new

LOTOS page.
(16 February 1995)


Information on

RAISE language and tools.
(19 January 1995)


A new section on the

B-Method has been added.
(6 January 1995)




Individual notations, methods and tools



Acl2 theorem prover, a successor to the
 Boyer-Moore theorem prover.
In progress - watch this space!



Action Semantics, a framework for specifying formal semantics
of programming languages.



Algebraic Design Language,
a higher-order software specification language.



ASLAN, a specification
language processor/proof obligation generator (email Dick Kemmerer on
 kemm@cs.ucsb.edu for
further details), and GIL, a
graphical interval logic tool (email Laura Dillon on  dillon@cs.ucsb.edu
for further details), are
available from a formal support tools archive (see the  index) at UC Santa Barbara.



Assertion Definition Language Translator (ADLT),
a specification based testing toolset.


 Boyer-Moore theorem prover
(a forerunner of Nqthm).
Available via 
ICOT Free Software for use under Unix at

ICOT (Japan),

SICS (Sweden),

GMD (Germany) and

Univ. of Oregon (USA).



B-Method, including the B-Tool and B-Toolkit.



Circal (CIRcuit CALculus) System supporting a process algebra which
may be used to rigorously describe, verify and simulate concurrent
systems.




COLD (Common Object-oriented Language for Design),
 a wide-spectrum specification language.
 



CWB (Edinburgh Concurrency Workbench), and
automated toolset.



Coq proof assistant.
See also


CtCoq, a working environment for the

Coq project theorem prover.



COSPAN (COordinated SPecification ANalysis),
a general-purpose rapid-prototyping tool,
using the S/R (selection/resolution) language.



CSP (Communicating Sequential Processes) including the
 FDR tool.



 DisCo
is specification method for reactive systems including a  tool developed
at the Tampere University of
Technology, Finland.



Estelle:



EDT (Estelle Development Toolset)
and 
example specifications.
Contact 
estelle-request@cs.umb.edu to join the mailing list.




Esterel,
for verifying safety properties in synchronous distributed systems.



EVES tool, based on ZF set theory, from ORA, Canada.




Evolving Algebras, University of Michigan, USA.



Extended ML
framework for the specification and  formal development of
modular Standard ML programs.




HOL mechanical theorem proving system.



HyTech is an automatic tool for the analysis of embedded systems.
It computes the condition under which a linear hybrid system satisfies
a temporal-logic requirement.  Installation requires a Mathematica
license.




IMPS, an Interactive Mathematical Proof System intended to provide
mechanical support for traditional mathematical techniques and styles
of practice.




Isabelle.
See also the Cambridge 
Automated Reasoning Group and FTP
access including an 
index.  Email 
Larry.Paulson-request@cl.cam.ac.uk
for information, including requests concerning the
isabelle-users@cl.cam.ac.uk mailing list.



JAPE (Just Another Proof Editor) by

Bernard Sufrin and


Richard Bornat is available via
 anonymous FTP.
See also


MacOS JAPE.



KIV (Karlsruhe Interactive Verifier).
 A tool for the development of correct software using stepwise
 refinement.




LAMBDA toolset from

Abstract Hardware Ltd, UK,
supports 
formal verification for hardware/software co-design.
Email 
lambda@ahl.co.uk. To join the usergroup mailing list,
email 
lambda-usergroup-request@dcs.ed.ac.uk.




Larch and LP (Larch
Prover).  See also DEC SRC's  Larch
Home Page and the 
Larch Project at  CMU.  The  Larch tool set (look at the
 README
file first) is available.



LeanTaP, a tableau-based deduction theorem prover for classical
first-order logic.



LEGO proof-checker.




LOTOS (Language of Temporal Ordering Specifications).
See also


here.



Maintainer's Assistant,
a tool for reverse engineering and re-engineering code using
formal methods.



Meije tools for the verification of concurrent programs.
Includes ATG, a graphical editor/visualizer.



Mizar tool, a long-term effort aimed at developing
software to support a working mathematician in preparing
papers.





Model Checking at CMU, a method for formally verifying
finite-state concurrent systems. 



Mural tool to aid formal reasoning about
specifications including a proof assistant and VDM support.
See also the 
Mural Project.



Murphi, a finite-state verification tool for concurrent systems.
See also

on-line papers.




Nqthm theorem prover and the 
Pc-Nqthm interactive ``Proof-checker'' enhancement
of the  Boyer-Moore Theorem Prover
from Computational Logic Inc.
See also


Nqthm users Gopher information.




Nuprl tool based on intuitionistic type theory.



OBJ - OBJ3 and 2OBJ.



Otter, an automated deduction system.




Petri Nets, a formal graphical notation
for modelling systems with concurrency.
See also


conferences.



Pi-calculus. (Also 
CCS - Calculus of Communicating Systems.)
See


papers by Robin Milner et al.

the 
Mobility Workbench
(see 
README file)
and a 
BibTeX bibliography.




ProofPower is a commercial tool, developed and marketed by ICL,
supporting development and checking of specifications and formal proofs
in  Higher Order Logic and/or  Z.
Support for Z uses a deep(ish) embedding of Z into HOL, but includes
syntax and type checking customized for Z.




PVS (Prototype Verification System) tool based on classical typed
higher-order logic developed at the 
SRI International  Computer Science
Laboratory.




RAISE language and tools from CRI, Denmark.
Email .
raise@csd.cri.dk.



Refinement Calculus by Ralph Back et al..




SDL Specification and Description Language.



SMV (Symbolic Model Verifier) model checker for finite-state
systems, using the specification language CTL (Computation Tree Logic),
a propositional branching-time temporal logic.
See also 
CSML and MCB, a language for compositional
description of
finite state machines and a (non-symbolic) model checker for CTL,
a 
BDD library with extensions for sequential verification, and

papers on various related topics.

 
SPIN is an automated verification tool (model checker), using a
language based on CSP, for finite state systems, such
as protocols or validation models of distributed systems, developed at
AT&T Bell Labs.



STeP, the  Stanford Temporal Prover.

 
TAM. The Temporal Agent Model from
the 
Real-Time Systems Research Group at York University.




TLA (Temporal Logic of Actions) has 
tool support.




TPS and ETPS, the Theorem Proving System and the Educational
Theorem Proving System.



TTM/RTTL framework for real-time reactive systems.



UNITY, a programming notation and a logic to reason about
parallel and distributed programs.



 VDM
(Vienna Development Method).  See also
the Mural tool, and VDM  text
books.




Z notation for formal specification.



See also:




Formal Methods Tools Database
(second sourced)
maintained by Tim Denvir.


Request for information for a

Formal Methods Applications Database by Nico Plat (November 1994).



Tools demonstration information
for 
WIFT95 workshop.


Newsgroups



Comp.specification including discussion of formal
specification and methods.
See also the newer

comp.specification.misc
newsgroup and other

related newsgroups:





Comp.specification.larch - more specific discussion on the
 Larch.



Comp.specification.z - more specific discussion on the
 Z and related notations.
Messages are  archived
(e.g., see 
most recent messages).
See also 
FAQ message (Frequently Asked Questions).



 Comp.software-eng -
more general discussion on software engineering, including formal
aspects.  Messages relating to  formal
methods and software safety in this newsgroup have been 
archived. See also the


comp.software-eng archive and

FAQ message information especially 
formal specification.



News.announce.conferences - announcements of conferences
including many specifically on formal methods
or with a formal methods content (e.g., see 
separated page on
meetings).





An electronic mailing list mostly concerned with educational issues
relating to formal methods in computer science is available.  Email 
formal-methods-request@cs.uidaho.edu to join/leave the
list and 
formal-methods@cs.uidaho.edu to post to the list.  
Of related interest

See also information on:






Automated reasoning systems
(see also systems

developed in Germany)


 Concurrent systems

 Logic programming


Logical frameworks

 Safety-critical systems


BNF (Backus-Naur Form notation) 





Last updated by
Jonathan Bowen,



Formal Methods Group,

Dept. of Computer Science,

University of Reading,
5 December 1995.
Further information for possible inclusion is welcome.

Part of the  OUCL
 archive.



